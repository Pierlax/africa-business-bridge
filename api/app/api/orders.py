"""
API routes per il modulo di gestione ordini (OMS)
"""
from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom datetime import datetime\nimport uuid\n\nfrom app.core.dependencies import get_current_user, get_db\nfrom app.models.user import User\nfrom app.models.orders import Order, OrderItem, OrderStatus\nfrom app.schemas.orders import (\n    OrderCreateSchema,\n    OrderResponseSchema,\n)\n\nrouter = APIRouter(prefix=\"/api/v1/orders\", tags=[\"orders\"])\n\n\n@router.post(\"/create\", response_model=OrderResponseSchema)\ndef create_order(\n    order_data: OrderCreateSchema,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Crea un nuovo ordine.\n    \"\"\"\n    # Genera un numero d'ordine univoco\n    order_number = f\"ORD-{datetime.utcnow().strftime('%Y%m%d')}-{str(uuid.uuid4())[:8].upper()}\"\n    \n    # Crea l'ordine\n    order = Order(\n        order_number=order_number,\n        buyer_id=current_user.id,\n        seller_id=order_data.seller_id,\n        title=order_data.title,\n        description=order_data.description,\n        total_amount=order_data.total_amount,\n        currency=order_data.currency,\n        delivery_date=order_data.delivery_date,\n        payment_terms=order_data.payment_terms,\n        status=OrderStatus.DRAFT,\n    )\n    \n    # Aggiungi le voci d'ordine\n    for item_data in order_data.items:\n        item = OrderItem(\n            product_id=item_data.product_id,\n            description=item_data.description,\n            quantity=item_data.quantity,\n            unit=item_data.unit,\n            unit_price=item_data.unit_price,\n            total_price=item_data.quantity * item_data.unit_price,\n            specifications=item_data.specifications,\n        )\n        order.items.append(item)\n    \n    db.add(order)\n    db.commit()\n    db.refresh(order)\n    \n    return order\n\n\n@router.get(\"/{order_id}\", response_model=OrderResponseSchema)\ndef get_order(\n    order_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Ottieni i dettagli di un ordine.\n    \"\"\"\n    order = db.query(Order).filter(Order.id == order_id).first()\n    \n    if not order:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Ordine non trovato.\"\n        )\n    \n    # Controlla se l'utente ha accesso all'ordine\n    if order.buyer_id != current_user.id and order.seller_id != current_user.id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Accesso negato.\"\n        )\n    \n    return order\n\n\n@router.get(\"/\", response_model=list[OrderResponseSchema])\ndef list_orders(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Elenca gli ordini dell'utente corrente.\n    \"\"\"\n    orders = db.query(Order).filter(\n        (Order.buyer_id == current_user.id) | (Order.seller_id == current_user.id)\n    ).all()\n    \n    return orders\n\n\n@router.put(\"/{order_id}/submit\")\ndef submit_order(\n    order_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Sottometti un ordine (cambia stato da DRAFT a SUBMITTED).\n    \"\"\"\n    order = db.query(Order).filter(Order.id == order_id).first()\n    \n    if not order:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Ordine non trovato.\"\n        )\n    \n    # Controlla se l'utente è il buyer\n    if order.buyer_id != current_user.id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Accesso negato.\"\n        )\n    \n    # Controlla lo stato attuale\n    if order.status != OrderStatus.DRAFT:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"L'ordine non è in stato DRAFT.\"\n        )\n    \n    order.status = OrderStatus.SUBMITTED\n    order.submitted_at = datetime.utcnow()\n    \n    db.commit()\n    db.refresh(order)\n    \n    return {\"message\": \"Ordine sottomesso con successo.\", \"order\": order}\n\n\n@router.put(\"/{order_id}/accept\")\ndef accept_order(\n    order_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Accetta un ordine (cambia stato da SUBMITTED a ACCEPTED).\n    \"\"\"\n    order = db.query(Order).filter(Order.id == order_id).first()\n    \n    if not order:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Ordine non trovato.\"\n        )\n    \n    # Controlla se l'utente è il seller\n    if order.seller_id != current_user.id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Accesso negato.\"\n        )\n    \n    # Controlla lo stato attuale\n    if order.status != OrderStatus.SUBMITTED:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"L'ordine non è in stato SUBMITTED.\"\n        )\n    \n    order.status = OrderStatus.ACCEPTED\n    \n    db.commit()\n    db.refresh(order)\n    \n    return {\"message\": \"Ordine accettato con successo.\", \"order\": order}\n"
