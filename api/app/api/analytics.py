\"\"\"Analytics API routes for tracking conversion funnel and metrics.\"\"\"\n\nfrom fastapi import APIRouter, Depends, HTTPException, Query\nfrom sqlalchemy.orm import Session\nfrom app.core.dependencies import get_db, get_current_user\nfrom app.services.analytics_service import AnalyticsService\nfrom app.models.user import User\nfrom pydantic import BaseModel\nfrom typing import Optional\n\nrouter = APIRouter(prefix='/api/v1/analytics', tags=['Analytics'])\n\n\nclass TrackActionRequest(BaseModel):\n    \"\"\"Request model for tracking user actions.\"\"\"\n\n    action_type: str\n    action_details: Optional[dict] = None\n\n\nclass OnboardingMetricsResponse(BaseModel):\n    \"\"\"Response model for onboarding metrics.\"\"\"\n\n    total_new_users: int\n    users_sent_first_message: int\n    completion_rate: float\n    period_days: int\n\n\nclass FeatureAdoptionResponse(BaseModel):\n    \"\"\"Response model for feature adoption metrics.\"\"\"\n\n    feature: str\n    total_active_users: int\n    feature_adopters: int\n    adoption_rate: float\n    period_days: int\n\n\nclass FunnelStageResponse(BaseModel):\n    \"\"\"Response model for a funnel stage.\"\"\"\n\n    stage: str\n    count: int\n    percentage: float\n\n\nclass ConversionFunnelResponse(BaseModel):\n    \"\"\"Response model for conversion funnel.\"\"\"\n\n    period_days: int\n    funnel_stages: list[FunnelStageResponse]\n\n\nclass DropOffPointResponse(BaseModel):\n    \"\"\"Response model for drop-off points.\"\"\"\n\n    from_stage: str\n    to_stage: str\n    drop_off_percentage: float\n    users_lost: int\n\n\nclass AlertResponse(BaseModel):\n    \"\"\"Response model for alerts.\"\"\"\n\n    id: int\n    metric_name: str\n    threshold: float\n    current_value: float\n    alert_type: str\n    message: str\n    is_resolved: bool\n    created_at: str\n\n\n@router.post('/track-action')\nasync def track_action(\n    request: TrackActionRequest,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Track a user action for analytics.\n\n    This endpoint records user actions for conversion funnel analysis.\n    \"\"\"\n    action = AnalyticsService.track_user_action(\n        db=db,\n        user_id=current_user.id,\n        action_type=request.action_type,\n        action_details=request.action_details,\n    )\n    return {\n        'id': action.id,\n        'user_id': action.user_id,\n        'action_type': action.action_type,\n        'timestamp': action.timestamp.isoformat(),\n    }\n\n\n@router.get('/onboarding-metrics', response_model=OnboardingMetricsResponse)\nasync def get_onboarding_metrics(\n    days: int = Query(7, ge=1, le=90),\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Get onboarding completion metrics.\n\n    Returns the percentage of new users who completed the onboarding tutorial.\n    \"\"\"\n    # Check if user is admin (you may want to add a role check)\n    metrics = AnalyticsService.get_onboarding_completion_rate(db, days)\n    return metrics\n\n\n@router.get('/feature-adoption/{feature}', response_model=FeatureAdoptionResponse)\nasync def get_feature_adoption(\n    feature: str,\n    days: int = Query(7, ge=1, le=90),\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Get feature adoption metrics for a specific feature.\n\n    Features:\n    - blockchain_contract\n    - order_management\n    - logistics\n    - inspection\n    - payments\n    \"\"\"\n    metrics = AnalyticsService.get_feature_adoption_rate(db, feature, days)\n    return metrics\n\n\n@router.get('/conversion-funnel', response_model=ConversionFunnelResponse)\nasync def get_conversion_funnel(\n    days: int = Query(7, ge=1, le=90),\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Get the complete conversion funnel metrics.\n\n    Funnel stages:\n    1. New users\n    2. Users who sent first message\n    3. Users who completed meeting\n    4. Users who created contract\n    5. Users who processed payment\n    \"\"\"\n    funnel = AnalyticsService.get_conversion_funnel(db, days)\n    return funnel\n\n\n@router.get('/drop-off-points')\nasync def get_drop_off_points(\n    days: int = Query(7, ge=1, le=90),\n    threshold: float = Query(30.0, ge=0, le=100),\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n) -> list[DropOffPointResponse]:\n    \"\"\"\n    Get drop-off points in the conversion funnel.\n\n    Returns stages where abandonment exceeds the specified threshold.\n    \"\"\"\n    drop_off_points = AnalyticsService.get_drop_off_points(db, days, threshold)\n    return drop_off_points\n\n\n@router.get('/alerts')\nasync def get_active_alerts(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n) -> list[AlertResponse]:\n    \"\"\"\n    Get all active (unresolved) alerts.\n\n    Alerts are triggered when metrics exceed critical thresholds.\n    \"\"\"\n    alerts = AnalyticsService.get_active_alerts(db)\n    return [\n        {\n            'id': alert.id,\n            'metric_name': alert.metric_name,\n            'threshold': alert.threshold,\n            'current_value': alert.current_value,\n            'alert_type': alert.alert_type,\n            'message': alert.message,\n            'is_resolved': alert.is_resolved,\n            'created_at': alert.created_at.isoformat(),\n        }\n        for alert in alerts\n    ]\n\n\n@router.post('/alerts/{alert_id}/resolve')\nasync def resolve_alert(\n    alert_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Mark an alert as resolved.\n    \"\"\"\n    alert = AnalyticsService.resolve_alert(db, alert_id)\n    if not alert:\n        raise HTTPException(status_code=404, detail='Alert not found')\n    return {\n        'id': alert.id,\n        'is_resolved': alert.is_resolved,\n        'resolved_at': alert.resolved_at.isoformat() if alert.resolved_at else None,\n    }\n
