"""
API routes for payment operations and currency conversions.
"""

from fastapi import APIRouter, HTTPException, Depends\nfrom app.services.payment_service import PaymentService\nfrom app.schemas.payment import (\n    ExchangeRateRequest,\n    ExchangeRateResponse,\n    OnrampSessionRequest,\n    OfframpSessionRequest,\n    PaymentSessionResponse,\n    SupportedCurrenciesResponse\n)\nfrom app.core.dependencies import get_current_user\n\nrouter = APIRouter(prefix=\"/api/v1/payments\", tags=[\"payments\"])\n\n# Initialize payment service\npayment_service = PaymentService()\n\n\n@router.get(\"/exchange-rate\", response_model=ExchangeRateResponse)\nasync def get_exchange_rate(\n    from_currency: str,\n    to_currency: str,\n    provider: str = None,\n    current_user = Depends(get_current_user)\n):\n    \"\"\"\n    Get exchange rate between two currencies.\n    \n    Requires authentication.\n    \"\"\"\n    result = await payment_service.get_exchange_rate(\n        from_currency=from_currency,\n        to_currency=to_currency,\n        provider=provider\n    )\n    \n    if \"error\" in result:\n        raise HTTPException(status_code=400, detail=result[\"error\"])\n    \n    return result\n\n\n@router.post(\"/onramp-session\", response_model=PaymentSessionResponse)\nasync def create_onramp_session(\n    request: OnrampSessionRequest,\n    current_user = Depends(get_current_user)\n):\n    \"\"\"\n    Create an on-ramp session for fiat-to-crypto conversion.\n    \n    This endpoint initiates a session with a payment provider to convert\n    fiat currency (EUR, USD, KES, etc.) to stablecoin (USDC, USDT) on Polygon.\n    \n    Requires authentication.\n    \"\"\"\n    result = await payment_service.create_onramp_session(\n        user_id=current_user.id,\n        wallet_address=request.wallet_address,\n        amount=request.amount,\n        from_currency=request.from_currency,\n        to_currency=request.to_currency,\n        provider=request.provider\n    )\n    \n    if \"error\" in result:\n        raise HTTPException(status_code=400, detail=result[\"error\"])\n    \n    return result\n\n\n@router.post(\"/offramp-session\", response_model=PaymentSessionResponse)\nasync def create_offramp_session(\n    request: OfframpSessionRequest,\n    current_user = Depends(get_current_user)\n):\n    \"\"\"\n    Create an off-ramp session for crypto-to-fiat conversion.\n    \n    This endpoint initiates a session with a payment provider to convert\n    stablecoin (USDC, USDT) on Polygon to fiat currency (EUR, USD, KES, etc.)\n    and transfer to a bank account.\n    \n    Requires authentication.\n    \"\"\"\n    result = await payment_service.create_offramp_session(\n        user_id=current_user.id,\n        wallet_address=request.wallet_address,\n        amount=request.amount,\n        from_currency=request.from_currency,\n        to_currency=request.to_currency,\n        bank_account_id=request.bank_account_id,\n        provider=request.provider\n    )\n    \n    if \"error\" in result:\n        raise HTTPException(status_code=400, detail=result[\"error\"])\n    \n    return result\n\n\n@router.get(\"/supported-currencies\", response_model=SupportedCurrenciesResponse)\nasync def get_supported_currencies(\n    provider: str = None,\n    current_user = Depends(get_current_user)\n):\n    \"\"\"\n    Get list of supported currencies for a payment provider.\n    \n    Requires authentication.\n    \"\"\"\n    result = await payment_service.get_supported_currencies(provider=provider)\n    \n    if \"error\" in result:\n        raise HTTPException(status_code=400, detail=result[\"error\"])\n    \n    return result\n"
