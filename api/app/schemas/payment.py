"""
Pydantic schemas for payment operations.
"""

from pydantic import BaseModel, Field, validator\nfrom typing import Optional, List\nfrom decimal import Decimal\nfrom enum import Enum\n\n\nclass PaymentProvider(str, Enum):\n    \"\"\"Supported payment providers.\"\"\"\n    CIRCLE = \"circle\"\n    TRANSAK = \"transak\"\n    MOONPAY = \"moonpay\"\n\n\nclass ExchangeRateRequest(BaseModel):\n    \"\"\"Schema for exchange rate request.\"\"\"\n    from_currency: str = Field(..., min_length=3, max_length=10)\n    to_currency: str = Field(..., min_length=3, max_length=10)\n    provider: Optional[PaymentProvider] = None\n\n\nclass ExchangeRateResponse(BaseModel):\n    \"\"\"Schema for exchange rate response.\"\"\"\n    from_currency: str\n    to_currency: str\n    rate: Decimal\n    provider: str\n    error: Optional[str] = None\n\n\nclass OnrampSessionRequest(BaseModel):\n    \"\"\"Schema for creating an on-ramp session (fiat-to-crypto).\"\"\"\n    wallet_address: str = Field(..., description=\"Destination wallet address\")\n    amount: Decimal = Field(..., gt=0, description=\"Amount in fiat currency\")\n    from_currency: str = Field(..., min_length=3, max_length=10)\n    to_currency: str = Field(..., min_length=3, max_length=10)\n    provider: Optional[PaymentProvider] = None\n\n\nclass OfframpSessionRequest(BaseModel):\n    \"\"\"Schema for creating an off-ramp session (crypto-to-fiat).\"\"\"\n    wallet_address: str = Field(..., description=\"Source wallet address\")\n    amount: Decimal = Field(..., gt=0, description=\"Amount in cryptocurrency\")\n    from_currency: str = Field(..., min_length=3, max_length=10)\n    to_currency: str = Field(..., min_length=3, max_length=10)\n    bank_account_id: Optional[str] = None\n    provider: Optional[PaymentProvider] = None\n\n\nclass PaymentSessionResponse(BaseModel):\n    \"\"\"Schema for payment session response.\"\"\"\n    session_id: str\n    url: str\n    provider: str\n    error: Optional[str] = None\n\n\nclass SupportedCurrenciesResponse(BaseModel):\n    \"\"\"Schema for supported currencies response.\"\"\"\n    fiat: List[str]\n    crypto: List[str]\n    error: Optional[str] = None\n\n\nclass WalletInfo(BaseModel):\n    \"\"\"Schema for wallet information.\"\"\"\n    address: str\n    balance: Decimal\n    currency: str\n    network: str = \"polygon\"\n\n\nclass TransactionHistory(BaseModel):\n    \"\"\"Schema for transaction history.\"\"\"\n    transaction_id: str\n    from_address: str\n    to_address: str\n    amount: Decimal\n    currency: str\n    status: str  # pending, completed, failed\n    timestamp: int\n    transaction_hash: Optional[str] = None\n"
