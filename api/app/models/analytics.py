\"\"\"Analytics models for tracking user actions and conversion metrics.\"\"\"\n\nfrom sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, JSON\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\n\nclass UserAction(Base):\n    \"\"\"Model for tracking user actions.\"\"\"\n\n    __tablename__ = 'user_actions'\n\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, nullable=False, index=True)\n    action_type = Column(String(100), nullable=False, index=True)\n    action_details = Column(JSON, nullable=True)\n    timestamp = Column(DateTime(timezone=True), server_default=func.now(), index=True)\n\n    def __repr__(self):\n        return f'<UserAction(id={self.id}, user_id={self.user_id}, action_type={self.action_type})>'\n\n\nclass ConversionMetric(Base):\n    \"\"\"Model for storing conversion funnel metrics.\"\"\"\n\n    __tablename__ = 'conversion_metrics'\n\n    id = Column(Integer, primary_key=True, index=True)\n    metric_name = Column(String(100), nullable=False, index=True)\n    metric_value = Column(Float, nullable=False)\n    period_days = Column(Integer, nullable=False)\n    calculated_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)\n\n    def __repr__(self):\n        return f'<ConversionMetric(id={self.id}, metric_name={self.metric_name}, value={self.metric_value})>'\n\n\nclass Alert(Base):\n    \"\"\"Model for storing alerts about metric thresholds.\"\"\"\n\n    __tablename__ = 'alerts'\n\n    id = Column(Integer, primary_key=True, index=True)\n    metric_name = Column(String(100), nullable=False, index=True)\n    threshold = Column(Float, nullable=False)\n    current_value = Column(Float, nullable=False)\n    alert_type = Column(String(50), nullable=False)  # 'critical', 'warning', 'info'\n    message = Column(String(500), nullable=False)\n    is_resolved = Column(Boolean, default=False, index=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)\n    resolved_at = Column(DateTime(timezone=True), nullable=True)\n\n    def __repr__(self):\n        return f'<Alert(id={self.id}, metric_name={self.metric_name}, type={self.alert_type})>'\n
