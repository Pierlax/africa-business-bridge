import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport '../styles/orders.css';\n\nconst Orders = () => {\n  const { user, token } = useAuth();\n  const [orders, setOrders] = useState([]);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [formData, setFormData] = useState({\n    seller_id: '',\n    title: '',\n    description: '',\n    total_amount: '',\n    currency: 'USD',\n    delivery_date: '',\n    payment_terms: 'NET30',\n    items: [{ description: '', quantity: 1, unit: 'pcs', unit_price: 0 }],\n  });\n\n  // Fetch orders on component mount\n  useEffect(() => {\n    fetchOrders();\n  }, []);\n\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/orders/`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      if (response.ok) {\n        const data = await response.json();\n        setOrders(data);\n      }\n    } catch (err) {\n      console.error('Error fetching orders:', err);\n      setError('Errore nel caricamento degli ordini.');\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleItemChange = (index, field, value) => {\n    const newItems = [...formData.items];\n    newItems[index][field] = value;\n    setFormData(prev => ({\n      ...prev,\n      items: newItems,\n    }));\n  };\n\n  const addItem = () => {\n    setFormData(prev => ({\n      ...prev,\n      items: [...prev.items, { description: '', quantity: 1, unit: 'pcs', unit_price: 0 }],\n    }));\n  };\n\n  const removeItem = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      items: prev.items.filter((_, i) => i !== index),\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      const payload = {\n        ...formData,\n        seller_id: parseInt(formData.seller_id),\n        total_amount: parseFloat(formData.total_amount),\n        items: formData.items.map(item => ({\n          ...item,\n          quantity: parseFloat(item.quantity),\n          unit_price: parseFloat(item.unit_price),\n        })),\n      };\n\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/orders/create`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n          },\n          body: JSON.stringify(payload),\n        }\n      );\n\n      if (response.ok) {\n        setSuccess('Ordine creato con successo!');\n        setShowCreateForm(false);\n        setFormData({\n          seller_id: '',\n          title: '',\n          description: '',\n          total_amount: '',\n          currency: 'USD',\n          delivery_date: '',\n          payment_terms: 'NET30',\n          items: [{ description: '', quantity: 1, unit: 'pcs', unit_price: 0 }],\n        });\n        fetchOrders();\n      } else {\n        const errorData = await response.json();\n        setError(errorData.detail || 'Errore nella creazione dell\\'ordine.');\n      }\n    } catch (err) {\n      setError('Errore di connessione. Riprova più tardi.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadgeClass = (status) => {\n    const statusClasses = {\n      draft: 'badge-secondary',\n      submitted: 'badge-info',\n      accepted: 'badge-success',\n      in_progress: 'badge-warning',\n      completed: 'badge-success',\n      cancelled: 'badge-danger',\n      disputed: 'badge-danger',\n    };\n    return statusClasses[status] || 'badge-secondary';\n  };\n\n  return (\n    <div className=\"orders-container\">\n      <div className=\"orders-header\">\n        <h1>Gestione Ordini</h1>\n        <button\n          onClick={() => setShowCreateForm(!showCreateForm)}\n          className=\"btn btn-primary\"\n        >\n          {showCreateForm ? 'Annulla' : 'Crea Nuovo Ordine'}\n        </button>\n      </div>\n\n      {/* Create Order Form */}\n      {showCreateForm && (\n        <form onSubmit={handleSubmit} className=\"order-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">Titolo Ordine</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Descrizione</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n            />\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"total_amount\">Importo Totale</label>\n              <input\n                type=\"number\"\n                id=\"total_amount\"\n                name=\"total_amount\"\n                value={formData.total_amount}\n                onChange={handleInputChange}\n                step=\"0.01\"\n                required\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"currency\">Valuta</label>\n              <select\n                id=\"currency\"\n                name=\"currency\"\n                value={formData.currency}\n                onChange={handleInputChange}\n              >\n                <option value=\"USD\">USD</option>\n                <option value=\"EUR\">EUR</option>\n                <option value=\"KES\">KES</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label>Voci d'Ordine</label>\n            {formData.items.map((item, index) => (\n              <div key={index} className=\"order-item\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Descrizione\"\n                  value={item.description}\n                  onChange={(e) => handleItemChange(index, 'description', e.target.value)}\n                  required\n                />\n                <input\n                  type=\"number\"\n                  placeholder=\"Quantità\"\n                  value={item.quantity}\n                  onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}\n                  step=\"0.01\"\n                  required\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Unità\"\n                  value={item.unit}\n                  onChange={(e) => handleItemChange(index, 'unit', e.target.value)}\n                  required\n                />\n                <input\n                  type=\"number\"\n                  placeholder=\"Prezzo Unitario\"\n                  value={item.unit_price}\n                  onChange={(e) => handleItemChange(index, 'unit_price', e.target.value)}\n                  step=\"0.01\"\n                  required\n                />\n                {formData.items.length > 1 && (\n                  <button\n                    type=\"button\"\n                    onClick={() => removeItem(index)}\n                    className=\"btn btn-danger btn-sm\"\n                  >\n                    Rimuovi\n                  </button>\n                )}\n              </div>\n            ))}\n            <button type=\"button\" onClick={addItem} className=\"btn btn-secondary btn-sm\">\n              Aggiungi Voce\n            </button>\n          </div>\n\n          {error && <div className=\"alert alert-danger\">{error}</div>}\n          {success && <div className=\"alert alert-success\">{success}</div>}\n\n          <button type=\"submit\" disabled={loading} className=\"btn btn-primary\">\n            {loading ? 'Creazione in corso...' : 'Crea Ordine'}\n          </button>\n        </form>\n      )}\n\n      {/* Orders List */}\n      <div className=\"orders-list\">\n        <h2>I Miei Ordini</h2>\n        {orders.length === 0 ? (\n          <p>Nessun ordine trovato.</p>\n        ) : (\n          <table className=\"orders-table\">\n            <thead>\n              <tr>\n                <th>Numero Ordine</th>\n                <th>Titolo</th>\n                <th>Importo</th>\n                <th>Status</th>\n                <th>Data Creazione</th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map(order => (\n                <tr key={order.id}>\n                  <td>{order.order_number}</td>\n                  <td>{order.title}</td>\n                  <td>{order.total_amount} {order.currency}</td>\n                  <td>\n                    <span className={`badge ${getStatusBadgeClass(order.status)}`}>\n                      {order.status.toUpperCase()}\n                    </span>\n                  </td>\n                  <td>{new Date(order.created_at).toLocaleDateString()}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Orders;\n"
