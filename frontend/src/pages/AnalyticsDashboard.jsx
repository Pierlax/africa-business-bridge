import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { AlertCircle, TrendingUp, Users, Target } from 'lucide-react';\nimport '../styles/analytics.css';\n\nconst AnalyticsDashboard = ({ apiUrl }) => {\n  const [onboardingMetrics, setOnboardingMetrics] = useState(null);\n  const [conversionFunnel, setConversionFunnel] = useState(null);\n  const [dropOffPoints, setDropOffPoints] = useState([]);\n  const [alerts, setAlerts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedPeriod, setSelectedPeriod] = useState(7);\n\n  useEffect(() => {\n    fetchAnalyticsData();\n  }, [selectedPeriod]);\n\n  const fetchAnalyticsData = async () => {\n    setLoading(true);\n    try {\n      // Fetch onboarding metrics\n      const onboardingRes = await fetch(\n        `${apiUrl}/analytics/onboarding-metrics?days=${selectedPeriod}`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        }\n      );\n      const onboardingData = await onboardingRes.json();\n      setOnboardingMetrics(onboardingData);\n\n      // Fetch conversion funnel\n      const funnelRes = await fetch(\n        `${apiUrl}/analytics/conversion-funnel?days=${selectedPeriod}`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        }\n      );\n      const funnelData = await funnelRes.json();\n      setConversionFunnel(funnelData);\n\n      // Fetch drop-off points\n      const dropOffRes = await fetch(\n        `${apiUrl}/analytics/drop-off-points?days=${selectedPeriod}&threshold=30`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        }\n      );\n      const dropOffData = await dropOffRes.json();\n      setDropOffPoints(dropOffData);\n\n      // Fetch alerts\n      const alertsRes = await fetch(`${apiUrl}/analytics/alerts`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      const alertsData = await alertsRes.json();\n      setAlerts(alertsData);\n    } catch (error) {\n      console.error('Error fetching analytics data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResolveAlert = async (alertId) => {\n    try {\n      await fetch(`${apiUrl}/analytics/alerts/${alertId}/resolve`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      setAlerts((prev) => prev.filter((alert) => alert.id !== alertId));\n    } catch (error) {\n      console.error('Error resolving alert:', error);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"analytics-loading\">Caricamento dati...</div>;\n  }\n\n  const COLORS = ['#0066cc', '#ff8c00', '#4caf50', '#f44336', '#9c27b0'];\n\n  return (\n    <div className=\"analytics-dashboard\">\n      <div className=\"analytics-header\">\n        <h1>Dashboard Analitico</h1>\n        <p>Monitora le metriche di adozione e il funnel di conversione</p>\n      </div>\n\n      {/* Period Selector */}\n      <div className=\"period-selector\">\n        <label>Periodo:</label>\n        <select value={selectedPeriod} onChange={(e) => setSelectedPeriod(parseInt(e.target.value))}>\n          <option value={7}>Ultimi 7 giorni</option>\n          <option value={14}>Ultimi 14 giorni</option>\n          <option value={30}>Ultimi 30 giorni</option>\n          <option value={90}>Ultimi 90 giorni</option>\n        </select>\n      </div>\n\n      {/* Alerts Section */}\n      {alerts.length > 0 && (\n        <div className=\"alerts-section\">\n          <h2>⚠️ Avvisi Attivi</h2>\n          <div className=\"alerts-list\">\n            {alerts.map((alert) => (\n              <div key={alert.id} className={`alert-card alert-${alert.alert_type}`}>\n                <div className=\"alert-header\">\n                  <AlertCircle size={20} className=\"alert-icon\" />\n                  <h4>{alert.metric_name}</h4>\n                </div>\n                <p className=\"alert-message\">{alert.message}</p>\n                <div className=\"alert-details\">\n                  <span>Soglia: {alert.threshold}%</span>\n                  <span>Valore attuale: {alert.current_value}%</span>\n                </div>\n                <button\n                  className=\"btn-resolve-alert\"\n                  onClick={() => handleResolveAlert(alert.id)}\n                >\n                  Risolvi\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Key Metrics */}\n      <div className=\"metrics-grid\">\n        {onboardingMetrics && (\n          <>\n            <div className=\"metric-card\">\n              <div className=\"metric-icon\">\n                <Users size={32} />\n              </div>\n              <div className=\"metric-content\">\n                <h3>Nuovi Utenti</h3>\n                <p className=\"metric-value\">{onboardingMetrics.total_new_users}</p>\n                <p className=\"metric-label\">Ultimi {onboardingMetrics.period_days} giorni</p>\n              </div>\n            </div>\n\n            <div className=\"metric-card\">\n              <div className=\"metric-icon\">\n                <TrendingUp size={32} />\n              </div>\n              <div className=\"metric-content\">\n                <h3>Tasso di Completamento Onboarding</h3>\n                <p className=\"metric-value\">{onboardingMetrics.completion_rate}%</p>\n                <p className=\"metric-label\">{onboardingMetrics.users_sent_first_message} utenti hanno inviato il primo messaggio</p>\n              </div>\n            </div>\n\n            <div className=\"metric-card\">\n              <div className=\"metric-icon\">\n                <Target size={32} />\n              </div>\n              <div className=\"metric-content\">\n                <h3>Tasso di Conversione</h3>\n                <p className=\"metric-value\">Vedi il funnel sotto</p>\n                <p className=\"metric-label\">Analizza il percorso completo</p>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Conversion Funnel */}\n      {conversionFunnel && (\n        <div className=\"funnel-section\">\n          <h2>Funnel di Conversione</h2>\n          <div className=\"funnel-container\">\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart\n                data={conversionFunnel.funnel_stages}\n                layout=\"vertical\"\n                margin={{ top: 5, right: 30, left: 200, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis type=\"number\" />\n                <YAxis dataKey=\"stage\" type=\"category\" width={190} />\n                <Tooltip />\n                <Bar dataKey=\"count\" fill=\"#0066cc\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Funnel Details */}\n          <div className=\"funnel-details\">\n            {conversionFunnel.funnel_stages.map((stage, idx) => (\n              <div key={idx} className=\"funnel-stage-detail\">\n                <div className=\"stage-info\">\n                  <h4>{stage.stage}</h4>\n                  <p>{stage.count} utenti</p>\n                </div>\n                <div className=\"stage-percentage\">\n                  <div className=\"percentage-bar\">\n                    <div\n                      className=\"percentage-fill\"\n                      style={{ width: `${stage.percentage}%` }}\n                    />\n                  </div>\n                  <span className=\"percentage-text\">{stage.percentage}%</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Drop-off Points */}\n      {dropOffPoints.length > 0 && (\n        <div className=\"dropoff-section\">\n          <h2>Punti di Abbandono Critici</h2>\n          <div className=\"dropoff-list\">\n            {dropOffPoints.map((point, idx) => (\n              <div key={idx} className=\"dropoff-card\">\n                <div className=\"dropoff-flow\">\n                  <span className=\"stage-from\">{point.from_stage}</span>\n                  <span className=\"arrow\">→</span>\n                  <span className=\"stage-to\">{point.to_stage}</span>\n                </div>\n                <div className=\"dropoff-metrics\">\n                  <div className=\"metric\">\n                    <span className=\"label\">Abbandono:</span>\n                    <span className=\"value\">{point.drop_off_percentage}%</span>\n                  </div>\n                  <div className=\"metric\">\n                    <span className=\"label\">Utenti persi:</span>\n                    <span className=\"value\">{point.users_lost}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AnalyticsDashboard;\n
