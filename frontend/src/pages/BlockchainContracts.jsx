import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport '../styles/blockchain.css';\n\nconst BlockchainContracts = () => {\n  const { user, token } = useAuth();\n  const [contracts, setContracts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [selectedContract, setSelectedContract] = useState(null);\n  const [formData, setFormData] = useState({\n    partyB: '',\n    description: '',\n    totalAmount: '',\n    milestones: [{ description: '', amount: '', dueDate: '' }]\n  });\n\n  useEffect(() => {\n    fetchContracts();\n  }, []);\n\n  const fetchContracts = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/v1/blockchain/agreements', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setContracts(data);\n      }\n    } catch (error) {\n      console.error('Error fetching contracts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleMilestoneChange = (index, field, value) => {\n    const newMilestones = [...formData.milestones];\n    newMilestones[index][field] = value;\n    setFormData(prev => ({ ...prev, milestones: newMilestones }));\n  };\n\n  const addMilestone = () => {\n    setFormData(prev => ({\n      ...prev,\n      milestones: [...prev.milestones, { description: '', amount: '', dueDate: '' }]\n    }));\n  };\n\n  const removeMilestone = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      milestones: prev.milestones.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleCreateContract = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const response = await fetch('/api/v1/blockchain/agreements', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          party_a: user?.wallet_address || '0x0',\n          party_b: formData.partyB,\n          description_hash: 'QmHash', // Placeholder\n          total_amount: parseInt(formData.totalAmount) * 1e6, // Convert to wei (USDC)\n          token_address: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174', // USDC on Polygon\n          escrow_address: '0x0', // Placeholder\n          milestones: formData.milestones.map(m => ({\n            description: m.description,\n            amount: parseInt(m.amount) * 1e6,\n            due_date: Math.floor(new Date(m.dueDate).getTime() / 1000)\n          }))\n        })\n      });\n\n      if (response.ok) {\n        alert('Contract created successfully!');\n        setShowCreateForm(false);\n        setFormData({\n          partyB: '',\n          description: '',\n          totalAmount: '',\n          milestones: [{ description: '', amount: '', dueDate: '' }]\n        });\n        fetchContracts();\n      } else {\n        alert('Error creating contract');\n      }\n    } catch (error) {\n      console.error('Error creating contract:', error);\n      alert('Error creating contract');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSignContract = async (contractId) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/v1/blockchain/agreements/${contractId}/sign`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          agreement_id: contractId,\n          signer_address: user?.wallet_address || '0x0'\n        })\n      });\n\n      if (response.ok) {\n        alert('Contract signed successfully!');\n        fetchContracts();\n      } else {\n        alert('Error signing contract');\n      }\n    } catch (error) {\n      console.error('Error signing contract:', error);\n      alert('Error signing contract');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'Draft':\n        return '#ffc107';\n      case 'Signed':\n        return '#17a2b8';\n      case 'Active':\n        return '#28a745';\n      case 'Completed':\n        return '#6c757d';\n      case 'Disputed':\n        return '#dc3545';\n      default:\n        return '#007bff';\n    }\n  };\n\n  return (\n    <div className=\"blockchain-contracts-container\">\n      <div className=\"contracts-header\">\n        <h2>Blockchain Contracts</h2>\n        <button \n          className=\"btn-primary\"\n          onClick={() => setShowCreateForm(!showCreateForm)}\n        >\n          {showCreateForm ? 'Cancel' : 'Create Contract'}\n        </button>\n      </div>\n\n      {showCreateForm && (\n        <div className=\"create-contract-form\">\n          <h3>Create New Contract</h3>\n          <form onSubmit={handleCreateContract}>\n            <div className=\"form-group\">\n              <label>Partner Address (Party B)</label>\n              <input\n                type=\"text\"\n                name=\"partyB\"\n                value={formData.partyB}\n                onChange={handleFormChange}\n                placeholder=\"0x...\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Description</label>\n              <textarea\n                name=\"description\"\n                value={formData.description}\n                onChange={handleFormChange}\n                placeholder=\"Contract description\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Total Amount (USDC)</label>\n              <input\n                type=\"number\"\n                name=\"totalAmount\"\n                value={formData.totalAmount}\n                onChange={handleFormChange}\n                placeholder=\"1000\"\n                required\n              />\n            </div>\n\n            <div className=\"milestones-section\">\n              <h4>Milestones</h4>\n              {formData.milestones.map((milestone, index) => (\n                <div key={index} className=\"milestone-item\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Milestone description\"\n                    value={milestone.description}\n                    onChange={(e) => handleMilestoneChange(index, 'description', e.target.value)}\n                    required\n                  />\n                  <input\n                    type=\"number\"\n                    placeholder=\"Amount (USDC)\"\n                    value={milestone.amount}\n                    onChange={(e) => handleMilestoneChange(index, 'amount', e.target.value)}\n                    required\n                  />\n                  <input\n                    type=\"date\"\n                    value={milestone.dueDate}\n                    onChange={(e) => handleMilestoneChange(index, 'dueDate', e.target.value)}\n                    required\n                  />\n                  {formData.milestones.length > 1 && (\n                    <button\n                      type=\"button\"\n                      className=\"btn-danger\"\n                      onClick={() => removeMilestone(index)}\n                    >\n                      Remove\n                    </button>\n                  )}\n                </div>\n              ))}\n              <button\n                type=\"button\"\n                className=\"btn-secondary\"\n                onClick={addMilestone}\n              >\n                Add Milestone\n              </button>\n            </div>\n\n            <button type=\"submit\" className=\"btn-primary\" disabled={loading}>\n              {loading ? 'Creating...' : 'Create Contract'}\n            </button>\n          </form>\n        </div>\n      )}\n\n      <div className=\"contracts-list\">\n        {loading && <p>Loading contracts...</p>}\n        {contracts.length === 0 && !loading && <p>No contracts found</p>}\n        {contracts.map(contract => (\n          <div key={contract.agreement_id} className=\"contract-card\">\n            <div className=\"contract-header\">\n              <h3>Contract #{contract.agreement_id}</h3>\n              <span \n                className=\"status-badge\"\n                style={{ backgroundColor: getStatusColor(contract.status) }}\n              >\n                {contract.status}\n              </span>\n            </div>\n            <div className=\"contract-details\">\n              <p><strong>Party A:</strong> {contract.party_a.substring(0, 10)}...</p>\n              <p><strong>Party B:</strong> {contract.party_b.substring(0, 10)}...</p>\n              <p><strong>Total Amount:</strong> {contract.total_amount / 1e6} USDC</p>\n              <p><strong>Created:</strong> {new Date(contract.created_date * 1000).toLocaleDateString()}</p>\n            </div>\n            <div className=\"contract-milestones\">\n              <h4>Milestones ({contract.milestones.length})</h4>\n              {contract.milestones.map((milestone, index) => (\n                <div key={index} className=\"milestone-info\">\n                  <span className=\"milestone-status\">\n                    {milestone.completed ? '✓' : '○'}\n                  </span>\n                  <span className=\"milestone-description\">{milestone.description}</span>\n                  <span className=\"milestone-amount\">{milestone.amount / 1e6} USDC</span>\n                </div>\n              ))}\n            </div>\n            <div className=\"contract-actions\">\n              {contract.status === 'Draft' && (\n                <button\n                  className=\"btn-primary\"\n                  onClick={() => handleSignContract(contract.agreement_id)}\n                  disabled={loading}\n                >\n                  Sign Contract\n                </button>\n              )}\n              <button\n                className=\"btn-secondary\"\n                onClick={() => setSelectedContract(contract)}\n              >\n                View Details\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BlockchainContracts;\n
