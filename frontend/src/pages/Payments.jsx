import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport '../styles/payments.css';\n\nconst Payments = () => {\n  const { user, token } = useAuth();\n  const [activeTab, setActiveTab] = useState('onramp');\n  const [loading, setLoading] = useState(false);\n  const [exchangeRate, setExchangeRate] = useState(null);\n  const [supportedCurrencies, setSupportedCurrencies] = useState(null);\n  const [formData, setFormData] = useState({\n    fromCurrency: 'EUR',\n    toCurrency: 'USDC',\n    amount: '',\n    walletAddress: '',\n    provider: 'circle'\n  });\n\n  useEffect(() => {\n    fetchSupportedCurrencies();\n  }, []);\n\n  const fetchSupportedCurrencies = async () => {\n    try {\n      const response = await fetch('/api/v1/payments/supported-currencies', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setSupportedCurrencies(data);\n      }\n    } catch (error) {\n      console.error('Error fetching currencies:', error);\n    }\n  };\n\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const fetchExchangeRate = async () => {\n    if (!formData.fromCurrency || !formData.toCurrency || !formData.amount) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `/api/v1/payments/exchange-rate?from_currency=${formData.fromCurrency}&to_currency=${formData.toCurrency}&provider=${formData.provider}`,\n        { headers: { 'Authorization': `Bearer ${token}` } }\n      );\n      if (response.ok) {\n        const data = await response.json();\n        setExchangeRate(data);\n      }\n    } catch (error) {\n      console.error('Error fetching exchange rate:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOnramp = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const response = await fetch('/api/v1/payments/onramp-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          wallet_address: formData.walletAddress || user?.wallet_address,\n          amount: parseFloat(formData.amount),\n          from_currency: formData.fromCurrency,\n          to_currency: formData.toCurrency,\n          provider: formData.provider\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        // Redirect to payment provider\n        window.open(data.url, '_blank');\n      } else {\n        alert('Error creating payment session');\n      }\n    } catch (error) {\n      console.error('Error creating onramp session:', error);\n      alert('Error creating payment session');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOfframp = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const response = await fetch('/api/v1/payments/offramp-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          wallet_address: formData.walletAddress || user?.wallet_address,\n          amount: parseFloat(formData.amount),\n          from_currency: formData.fromCurrency,\n          to_currency: formData.toCurrency,\n          provider: formData.provider\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        // Redirect to payment provider\n        window.open(data.url, '_blank');\n      } else {\n        alert('Error creating payment session');\n      }\n    } catch (error) {\n      console.error('Error creating offramp session:', error);\n      alert('Error creating payment session');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"payments-container\">\n      <div className=\"payments-header\">\n        <h2>Payment Gateway</h2>\n        <p>Convert between fiat and cryptocurrency on Polygon network</p>\n      </div>\n\n      <div className=\"payment-tabs\">\n        <button\n          className={`tab-button ${activeTab === 'onramp' ? 'active' : ''}`}\n          onClick={() => setActiveTab('onramp')}\n        >\n          Buy Crypto (On-Ramp)\n        </button>\n        <button\n          className={`tab-button ${activeTab === 'offramp' ? 'active' : ''}`}\n          onClick={() => setActiveTab('offramp')}\n        >\n          Sell Crypto (Off-Ramp)\n        </button>\n      </div>\n\n      <div className=\"payment-form-container\">\n        <form onSubmit={activeTab === 'onramp' ? handleOnramp : handleOfframp}>\n          <div className=\"form-section\">\n            <h3>{activeTab === 'onramp' ? 'Buy Cryptocurrency' : 'Sell Cryptocurrency'}</h3>\n\n            <div className=\"form-group\">\n              <label>From Currency</label>\n              <select\n                name=\"fromCurrency\"\n                value={formData.fromCurrency}\n                onChange={handleFormChange}\n              >\n                {activeTab === 'onramp' ? (\n                  supportedCurrencies?.fiat?.map(curr => (\n                    <option key={curr} value={curr}>{curr}</option>\n                  ))\n                ) : (\n                  supportedCurrencies?.crypto?.map(curr => (\n                    <option key={curr} value={curr}>{curr}</option>\n                  ))\n                )}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>To Currency</label>\n              <select\n                name=\"toCurrency\"\n                value={formData.toCurrency}\n                onChange={handleFormChange}\n              >\n                {activeTab === 'onramp' ? (\n                  supportedCurrencies?.crypto?.map(curr => (\n                    <option key={curr} value={curr}>{curr}</option>\n                  ))\n                ) : (\n                  supportedCurrencies?.fiat?.map(curr => (\n                    <option key={curr} value={curr}>{curr}</option>\n                  ))\n                )}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Amount</label>\n              <input\n                type=\"number\"\n                name=\"amount\"\n                value={formData.amount}\n                onChange={handleFormChange}\n                placeholder=\"0.00\"\n                step=\"0.01\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Wallet Address</label>\n              <input\n                type=\"text\"\n                name=\"walletAddress\"\n                value={formData.walletAddress}\n                onChange={handleFormChange}\n                placeholder=\"0x... (optional, uses your default)\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Payment Provider</label>\n              <select\n                name=\"provider\"\n                value={formData.provider}\n                onChange={handleFormChange}\n              >\n                <option value=\"circle\">Circle</option>\n                <option value=\"transak\">Transak</option>\n                <option value=\"moonpay\">MoonPay</option>\n              </select>\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"btn-secondary\"\n              onClick={fetchExchangeRate}\n              disabled={loading}\n            >\n              Get Exchange Rate\n            </button>\n\n            {exchangeRate && !exchangeRate.error && (\n              <div className=\"exchange-rate-info\">\n                <p>Exchange Rate: 1 {exchangeRate.from_currency} = {exchangeRate.rate} {exchangeRate.to_currency}</p>\n                <p>You will receive: {(parseFloat(formData.amount) * exchangeRate.rate).toFixed(2)} {exchangeRate.to_currency}</p>\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              className=\"btn-primary\"\n              disabled={loading || !formData.amount}\n            >\n              {loading ? 'Processing...' : (activeTab === 'onramp' ? 'Buy Now' : 'Sell Now')}\n            </button>\n          </div>\n        </form>\n      </div>\n\n      <div className=\"payment-info\">\n        <h3>How It Works</h3>\n        <div className=\"info-cards\">\n          <div className=\"info-card\">\n            <h4>On-Ramp (Buy Crypto)</h4>\n            <p>Convert your fiat currency (EUR, USD, KES, etc.) to stablecoin (USDC, USDT) on the Polygon network.</p>\n            <ul>\n              <li>Fast transactions</li>\n              <li>Low fees</li>\n              <li>Multiple payment methods</li>\n            </ul>\n          </div>\n          <div className=\"info-card\">\n            <h4>Off-Ramp (Sell Crypto)</h4>\n            <p>Convert your stablecoin back to fiat currency and withdraw to your bank account.</p>\n            <ul>\n              <li>Direct bank transfers</li>\n              <li>Transparent pricing</li>\n              <li>Secure transactions</li>\n            </ul>\n          </div>\n          <div className=\"info-card\">\n            <h4>Supported Networks</h4>\n            <p>All transactions are processed on the Polygon network for speed and low costs.</p>\n            <ul>\n              <li>Polygon (MATIC)</li>\n              <li>USDC & USDT stablecoins</li>\n              <li>Global coverage</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Payments;\n
