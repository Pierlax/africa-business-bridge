import React, { useState, useEffect } from 'react';\nimport { AlertCircle, Lightbulb, CheckCircle } from 'lucide-react';\nimport '../styles/progressive-disclosure.css';\n\nconst ProgressiveDisclosure = ({ userActions, onFeatureUnlock }) => {\n  const [unlockedFeatures, setUnlockedFeatures] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n\n  // Define feature unlock triggers\n  const featureTriggers = [\n    {\n      id: 'calendar-meeting',\n      trigger: 'first_message_sent',\n      title: 'Calendario B2B Sbloccato',\n      description: 'Ottimo! Ora puoi organizzare un incontro. Usa il nostro Calendario B2B per trovare una data comune.',\n      icon: '📅',\n      feature: 'meetings',\n    },\n    {\n      id: 'blockchain-contract',\n      trigger: 'meeting_completed',\n      title: 'Contratti Digitali Sbloccati',\n      description: 'La conversazione è andata bene? Formalizza l\\'accordo in modo sicuro. Crea un Contratto Digitale in 3 passi.',\n      icon: '🔐',\n      feature: 'blockchain',\n    },\n    {\n      id: 'order-management',\n      trigger: 'contract_signed',\n      title: 'Gestione Ordini Sbloccata',\n      description: 'Contratto attivo! Ora puoi finanziare la prima fase e tracciare l\\'ordine qui.',\n      icon: '📦',\n      feature: 'orders',\n    },\n    {\n      id: 'logistics',\n      trigger: 'order_milestone_created',\n      title: 'Logistica Sbloccata',\n      description: 'Pronto a spedire? Richiedi quotazioni dai nostri partner logistici verificati con un click.',\n      icon: '🚚',\n      feature: 'logistics',\n    },\n  ];\n\n  // Check for triggered features\n  useEffect(() => {\n    const newUnlockedFeatures = [];\n    const newNotifications = [];\n\n    featureTriggers.forEach((trigger) => {\n      if (userActions[trigger.trigger] && !unlockedFeatures.includes(trigger.id)) {\n        newUnlockedFeatures.push(trigger.id);\n        newNotifications.push({\n          id: trigger.id,\n          title: trigger.title,\n          description: trigger.description,\n          icon: trigger.icon,\n          timestamp: new Date(),\n        });\n        onFeatureUnlock(trigger.feature);\n      }\n    });\n\n    if (newUnlockedFeatures.length > 0) {\n      setUnlockedFeatures((prev) => [...prev, ...newUnlockedFeatures]);\n      setNotifications((prev) => [...prev, ...newNotifications]);\n\n      // Auto-remove notifications after 5 seconds\n      const timer = setTimeout(() => {\n        setNotifications((prev) => prev.slice(1));\n      }, 5000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [userActions, unlockedFeatures, onFeatureUnlock]);\n\n  return (\n    <div className=\"progressive-disclosure\">\n      {/* Notification Toast */}\n      {notifications.length > 0 && (\n        <div className=\"notification-container\">\n          {notifications.map((notification) => (\n            <div key={notification.id} className=\"notification-toast\">\n              <div className=\"notification-icon\">{notification.icon}</div>\n              <div className=\"notification-content\">\n                <h4 className=\"notification-title\">{notification.title}</h4>\n                <p className=\"notification-description\">{notification.description}</p>\n              </div>\n              <button\n                className=\"notification-close\"\n                onClick={() => setNotifications((prev) => prev.filter((n) => n.id !== notification.id))}\n              >\n                ✕\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Feature Unlock Status */}\n      <div className=\"feature-status\">\n        <h3 className=\"status-title\">Funzionalità Sbloccate</h3>\n        <div className=\"feature-list\">\n          {featureTriggers.map((trigger) => {\n            const isUnlocked = unlockedFeatures.includes(trigger.id);\n            return (\n              <div key={trigger.id} className={`feature-item ${isUnlocked ? 'unlocked' : 'locked'}`}>\n                <div className=\"feature-icon\">\n                  {isUnlocked ? (\n                    <CheckCircle size={20} className=\"check-icon\" />\n                  ) : (\n                    <Lightbulb size={20} className=\"lightbulb-icon\" />\n                  )}\n                </div>\n                <div className=\"feature-info\">\n                  <h4 className=\"feature-name\">{trigger.title}</h4>\n                  <p className=\"feature-description\">{trigger.description}</p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressiveDisclosure;\n
